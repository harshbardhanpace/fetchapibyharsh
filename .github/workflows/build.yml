name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - 'hotfix-*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # - name: SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   with:
      #      projectBaseDir: .
      #      args: >
      #         -Dsonar.organization=my-sonarqube-org
      #         -Dsonar.projectKey=pocketful-space
      #   env:
      #      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the latest tag from the branch
        id: get-latest-tag
        run: |
  
          # Fetch the latest tag from the current branch or fallback to v0.0.0
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Latest tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Determine new version number
        id: version
        run: |
          latest_tag="${{ steps.get-latest-tag.outputs.latest_tag }}"
          
          # Remove 'v' from the tag if present
          if [[ "${latest_tag}" == v* ]]; then
            latest_tag="${latest_tag#v}"
          fi

          # Split the version into major.minor.patch
          IFS='.' read -r major minor patch <<< "$latest_tag"
          
          echo "Version Parts: major=$major, minor=$minor, patch=$patch"
          
          # Fetch the branch name from the GITHUB_REF
          branch_name=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')

          # Logic for pre-prod branch
          if [[ "$branch_name" == main ]]; then
            if [[ "$latest_tag" == "0.0.0" ]]; then
              new_version="1.0.0"  # No tags exist, start at 1.0.0
            else
             new_patch_version=$((patch + 1))  # Increment patch version
             new_version="${major}.0.$new_patch_version"
            fi
          elif [[ "$branch_name" == hotfix-* ]]; then
            if [[ "$latest_tag" == "0.0.0" ]]; then
              new_version="1.1.0"  # Start hotfix from 1.1.0 if no tags exist
            else
              new_minor_version=$((minor + 1))  # Increment minor version
              new_version="${major}.$new_minor_version.${patch}"  # Keep patch constant
            fi

          else
            echo "Skipping version bump for other branches"
            new_version="$latest_tag"
          fi

          echo "Version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "::set-output name=new_version::$new_version"

      - name: Display content of secret
        run: echo "${{ secrets.CONFIG_JSON}}"
        
      - name: Create config file from secret
        run: |
          jq --slurpfile newdata <(echo '{ "config": { "secret": ${{ secrets.CONFIG_JSON}} }}')    '.config += $newdata[0].config' < resources/config.json > tmp.json && mv tmp.json resources/config.json
          
      - name: Display content of config.json after modification
        run: cat resources/config.json
        
      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/pocketful-tech/space:${{ steps.version.outputs.new_version }}

      - name: Push Tag and Create Release Notes
        if: startsWith(github.ref, 'refs/heads/hotfix-') || github.ref == 'refs/heads/main'
        run: |
         # Push the tag to the current branch
         branch_name=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')
         echo "Current branch: $branch_name"
         # Create a new tag based on the version
         git tag "${{ steps.version.outputs.new_version }}"

         # Push the tag to the current branch (hotfix-* or production)
         git push origin "${{ steps.version.outputs.new_version }}"
         echo "Tag pushed to branch: $branch_name"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          body: |
            Automatically generated release for version ${{ steps.version.outputs.new_version }}.
